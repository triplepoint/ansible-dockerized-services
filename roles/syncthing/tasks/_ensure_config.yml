---
###
# Thanks to:
# https://github.com/le9i0nx/ansible-syncthing/blob/master/tasks/config.yml
###

# GUI username
- name: Fetch the current user
  community.docker.docker_container_exec:
    container: syncthing
    user: "{{ syncthing_user_id }}"
    command: syncthing cli --data=/var/syncthing/Sync --config=/var/syncthing/config config gui user get
    env:
      STHOMEDIR: ""
  register: _syncthing_current_user
  changed_when: false
  check_mode: false

- name: Ensure the user is set on the service config
  community.docker.docker_container_exec:
    container: syncthing
    user: "{{ syncthing_user_id }}"
    command: syncthing cli --data=/var/syncthing/Sync --config=/var/syncthing/config config gui user set {{ syncthing_admin_user }}
    env:
      STHOMEDIR: ""
  when: _syncthing_current_user.rc != 0 or _syncthing_current_user.stdout != syncthing_admin_user

# GUI username and password
- name: Fetch the current hashed password
  community.docker.docker_container_exec:
    container: syncthing
    user: "{{ syncthing_user_id }}"
    command: syncthing cli --data=/var/syncthing/Sync --config=/var/syncthing/config config gui password get
    env:
      STHOMEDIR: ""
  register: _syncthing_current_hashed_password
  changed_when: false
  check_mode: false

- name: Determine whether the hash matches the password
  ansible.builtin.command: |
    python3 -c "from passlib.hash import bcrypt; print(bcrypt.verify('{{ syncthing_admin_password }}', '{{ _syncthing_current_hashed_password.stdout }}'))"
  delegate_to: localhost
  become: false
  register: _syncthing_password_matches
  changed_when: false
  check_mode: false

- name: Ensure the password is set on the service config
  community.docker.docker_container_exec:
    container: syncthing
    user: "{{ syncthing_user_id }}"
    command: syncthing cli --data=/var/syncthing/Sync --config=/var/syncthing/config config gui password set {{ syncthing_admin_password }}
    env:
      STHOMEDIR: ""
  when: _syncthing_current_hashed_password.rc != 0 or _syncthing_password_matches.stdout != "True"

# API key
- name: Fetch the current hashed password
  community.docker.docker_container_exec:
    container: syncthing
    user: "{{ syncthing_user_id }}"
    command: syncthing cli --data=/var/syncthing/Sync --config=/var/syncthing/config config gui apikey get
    env:
      STHOMEDIR: ""
  register: _syncthing_current_apikey
  changed_when: false
  check_mode: false

- name: Ensure the API key is set on the service config
  community.docker.docker_container_exec:
    container: syncthing
    user: "{{ syncthing_user_id }}"
    command: syncthing cli --data=/var/syncthing/Sync --config=/var/syncthing/config config gui apikey set {{ syncthing_api_key }}
    env:
      STHOMEDIR: ""
  when: _syncthing_current_apikey.rc != 0 or _syncthing_current_apikey.stdout != syncthing_api_key

# Update the service config
- name: Run an API call inside the container to fetch the current service config
  community.docker.docker_container_exec:
    container: syncthing
    user: "{{ syncthing_user_id }}"
    command: "curl -s -H 'X-API-KEY: {{ syncthing_api_key }}' http://localhost:8384/rest/config"
  register: _syncthing_config_raw
  changed_when: false
  retries: 5
  until: _syncthing_config_raw is not failed
  delay: 10
  check_mode: false

- name: Store a copy of the config, for later diff comparison
  ansible.builtin.set_fact:
    _syncthing_config_old: "{{ _syncthing_config_raw.stdout | from_json }}"

- name: Combine the new config with the existing configuration
  ansible.builtin.set_fact:
    _syncthing_config_new: "{{ _syncthing_config_old | combine(syncthing_config, recursive=true) }}"
  no_log: true

- name: Show the change in the service configuration
  ansible.utils.fact_diff:
    before: "{{ _syncthing_config_old }}"
    after: "{{ _syncthing_config_new }}"

- name: Run an API call inside the container to set the new service config
  community.docker.docker_container_exec:
    container: syncthing
    user: "{{ syncthing_user_id }}"
    command: "curl -s -X PUT -H 'X-API-KEY: {{ syncthing_api_key }}' -d '{{ _syncthing_config_new | to_json }}' -H 'Content-Type: application/json' http://localhost:8384/rest/config" # noqa yaml[line-length]
  when: _syncthing_config_new != _syncthing_config_old
  no_log: true

# Restart if necessary
- name: Verify that the POSTed config is applied
  community.docker.docker_container_exec:
    container: syncthing
    user: "{{ syncthing_user_id }}"
    command: "curl -s -H 'X-API-KEY: {{ syncthing_api_key }}' http://localhost:8384/rest/config/restart-required"
  register: _syncthing_config_applied_raw
  changed_when: false
  retries: 5
  until: _syncthing_config_applied_raw is not failed
  delay: 10

- name: Restart syncthing if its applied config is not consistent with the disk version
  ansible.builtin.command: /bin/true
  changed_when: _syncthing_config_applied_raw.stdout | from_json | json_query('requiresRestart') | bool
  notify: Restart syncthing
